from behave._types import Unknown as Unknown
from typing import Any, Optional

def parse_scoped_name(scoped_name: Any): ...
def load_module(module_name: Any): ...

class LazyObject:
    module_name: Any = ...
    object_name: Any = ...
    resolved_object: Any = ...
    def __init__(self, module_name: Any, object_name: Optional[Any] = ...) -> None: ...
    def __get__(self, obj: Optional[Any] = ..., type: Optional[Any] = ...): ...
    def __set__(self, obj: Any, value: Any) -> None: ...
    def get(self): ...

class LazyDict(dict):
    def __getitem__(self, key: Any): ...
    def load_all(self, strict: bool = ...) -> None: ...
