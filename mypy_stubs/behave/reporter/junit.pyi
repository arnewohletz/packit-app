from behave.formatter import ansi_escapes as ansi_escapes
from behave.model import Scenario as Scenario, ScenarioOutline as ScenarioOutline, Step as Step
from behave.model_core import Status as Status
from behave.model_describe import ModelDescriptor as ModelDescriptor
from behave.reporter.base import Reporter as Reporter
from behave.textutil import indent as indent, make_indentation as make_indentation
from behave.userdata import UserDataNamespace as UserDataNamespace
from typing import Any, Optional
from xml.etree import ElementTree

def CDATA(text: Optional[Any] = ...): ...

class ElementTreeWithCDATA(ElementTree.ElementTree): ...

class FeatureReportData:
    feature: Any = ...
    filename: Any = ...
    classname: Any = ...
    testcases: Any = ...
    counts_tests: int = ...
    counts_errors: int = ...
    counts_failed: int = ...
    counts_skipped: int = ...
    def __init__(self, feature: Any, filename: Any, classname: Optional[Any] = ...) -> None: ...
    def reset(self) -> None: ...

class JUnitReporter(Reporter):
    userdata_scope: str = ...
    show_timings: bool = ...
    show_skipped_always: bool = ...
    show_timestamp: bool = ...
    show_hostname: bool = ...
    show_scenarios: bool = ...
    show_tags: bool = ...
    show_multiline: bool = ...
    def __init__(self, config: Any) -> None: ...
    def setup_with_userdata(self, userdata: Any) -> None: ...
    def make_feature_filename(self, feature: Any): ...
    @property
    def show_skipped(self): ...
    def feature(self, feature: Any) -> None: ...
    @staticmethod
    def select_step_with_status(status: Any, steps: Any): ...
    def describe_step(self, step: Any): ...
    @classmethod
    def describe_tags(cls, tags: Any): ...
    def describe_scenario(self, scenario: Any): ...

def gethostname(): ...
