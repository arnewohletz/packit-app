from behave import i18n as i18n, model as model
from typing import Any, Optional

DEFAULT_LANGUAGE: str

def parse_file(filename: Any, language: Optional[Any] = ...): ...
def parse_feature(data: Any, language: Optional[Any] = ..., filename: Optional[Any] = ...): ...
def parse_steps(text: Any, language: Optional[Any] = ..., filename: Optional[Any] = ...): ...
def parse_tags(text: Any): ...

class ParserError(Exception):
    line: Any = ...
    line_text: Any = ...
    filename: Any = ...
    def __init__(self, message: Any, line: Any, filename: Optional[Any] = ..., line_text: Optional[Any] = ...) -> None: ...

class Parser:
    language: Any = ...
    variant: Any = ...
    state: str = ...
    line: int = ...
    last_step: Any = ...
    multiline_start: Any = ...
    multiline_leading: Any = ...
    multiline_terminator: Any = ...
    filename: Any = ...
    feature: Any = ...
    statement: Any = ...
    tags: Any = ...
    lines: Any = ...
    table: Any = ...
    examples: Any = ...
    keywords: Any = ...
    def __init__(self, language: Optional[Any] = ..., variant: Optional[Any] = ...) -> None: ...
    def reset(self) -> None: ...
    def parse(self, data: Any, filename: Optional[Any] = ...): ...
    def diagnose_feature_usage_error(self): ...
    def diagnose_background_usage_error(self): ...
    def diagnose_scenario_usage_error(self): ...
    def diagnose_scenario_outline_usage_error(self): ...
    def ask_parse_failure_oracle(self, line: Any): ...
    def action(self, line: Any) -> None: ...
    def action_init(self, line: Any): ...
    def subaction_detect_taggable_statement(self, line: Any): ...
    def action_feature(self, line: Any): ...
    def action_taggable_statement(self, line: Any): ...
    def action_scenario(self, line: Any): ...
    def action_steps(self, line: Any): ...
    def action_multiline(self, line: Any): ...
    def action_table(self, line: Any): ...
    def match_keyword(self, keyword: Any, line: Any): ...
    def parse_tags(self, line: Any): ...
    def parse_step(self, line: Any): ...
    def parse_steps(self, text: Any, filename: Optional[Any] = ...): ...
