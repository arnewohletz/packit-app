from behave import parser as parser
from behave.model_core import FileLocation as FileLocation
from behave.textutil import ensure_stream_with_encoder as ensure_stream_with_encoder
from typing import Any, Optional

class FileNotFoundError(LookupError): ...
class InvalidFileLocationError(LookupError): ...
class InvalidFilenameError(ValueError): ...

class FileLocationParser:
    pattern: Any = ...
    @classmethod
    def parse(cls, text: Any): ...

class FeatureScenarioLocationCollector:
    feature: Any = ...
    filename: Any = ...
    use_all_scenarios: bool = ...
    scenario_lines: Any = ...
    all_scenarios: Any = ...
    selected_scenarios: Any = ...
    def __init__(self, feature: Optional[Any] = ..., location: Optional[Any] = ..., filename: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...
    def add_location(self, location: Any) -> None: ...
    @staticmethod
    def select_scenario_line_for(line: Any, scenario_lines: Any): ...
    def discover_selected_scenarios(self, strict: bool = ...): ...
    def build_feature(self): ...

class FeatureListParser:
    @staticmethod
    def parse(text: Any, here: Optional[Any] = ...): ...
    @classmethod
    def parse_file(cls, filename: Any): ...

class PathManager:
    initial_paths: Any = ...
    paths: Any = ...
    def __init__(self, paths: Optional[Any] = ...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *crap: Any) -> None: ...
    def add(self, path: Any) -> None: ...

def parse_features(feature_files: Any, language: Optional[Any] = ...): ...
def collect_feature_locations(paths: Any, strict: bool = ...): ...
def exec_file(filename: Any, globals_: Optional[Any] = ..., locals_: Optional[Any] = ...) -> None: ...
def load_step_modules(step_paths: Any) -> None: ...
def make_undefined_step_snippet(step: Any, language: Optional[Any] = ...): ...
def make_undefined_step_snippets(undefined_steps: Any, make_snippet: Optional[Any] = ...): ...
def print_undefined_step_snippets(undefined_steps: Any, stream: Optional[Any] = ..., colored: bool = ...) -> None: ...
def reset_runtime() -> None: ...
