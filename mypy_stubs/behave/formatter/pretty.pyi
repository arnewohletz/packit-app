from behave.formatter.ansi_escapes import escapes as escapes, up as up
from behave.formatter.base import Formatter as Formatter
from behave.model_core import Status as Status
from behave.model_describe import escape_cell as escape_cell, escape_triple_quotes as escape_triple_quotes
from behave.textutil import indent as indent
from typing import Any

DEFAULT_WIDTH: int
DEFAULT_HEIGHT: int

def get_terminal_size(): ...

class MonochromeFormat:
    def text(self, text: Any): ...

class ColorFormat:
    status: Any = ...
    def __init__(self, status: Any) -> None: ...
    def text(self, text: Any): ...

class PrettyFormatter(Formatter):
    name: str = ...
    description: str = ...
    stream: Any = ...
    monochrome: Any = ...
    show_source: Any = ...
    show_timings: Any = ...
    show_multiline: Any = ...
    formats: Any = ...
    display_width: Any = ...
    steps: Any = ...
    statement: Any = ...
    indentations: Any = ...
    step_lines: int = ...
    def __init__(self, stream_opener: Any, config: Any) -> None: ...
    def reset(self) -> None: ...
    def uri(self, uri: Any) -> None: ...
    def feature(self, feature: Any) -> None: ...
    def background(self, background: Any) -> None: ...
    def scenario(self, scenario: Any) -> None: ...
    def replay(self) -> None: ...
    def step(self, step: Any) -> None: ...
    def match(self, match: Any) -> None: ...
    def result(self, step: Any) -> None: ...
    def arg_format(self, key: Any): ...
    def format(self, key: Any): ...
    def eof(self) -> None: ...
    def table(self, table: Any) -> None: ...
    def doc_string(self, doc_string: Any) -> None: ...
    def color(self, cell: Any, statuses: Any, _color: Any): ...
    def indented_text(self, text: Any, proceed: Any): ...
    def calculate_location_indentations(self) -> None: ...
    def print_statement(self) -> None: ...
    def print_steps(self) -> None: ...
    def print_step(self, status: Any, arguments: Any, location: Any, proceed: Any) -> None: ...
    def print_tags(self, tags: Any, indentation: Any) -> None: ...
    def print_comments(self, comments: Any, indentation: Any) -> None: ...
    def print_description(self, description: Any, indentation: Any, newline: bool = ...) -> None: ...
