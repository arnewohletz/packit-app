from behave.formatter.base import Formatter as Formatter
from behave.model_core import Status as Status
from typing import Any

class JSONFormatter(Formatter):
    name: str = ...
    description: str = ...
    dumps_kwargs: Any = ...
    split_text_into_lines: bool = ...
    json_number_types: Any = ...
    json_scalar_types: Any = ...
    stream: Any = ...
    feature_count: int = ...
    current_feature: Any = ...
    current_feature_data: Any = ...
    current_scenario: Any = ...
    def __init__(self, stream_opener: Any, config: Any) -> None: ...
    def reset(self) -> None: ...
    def uri(self, uri: Any) -> None: ...
    def feature(self, feature: Any) -> None: ...
    def background(self, background: Any) -> None: ...
    def scenario(self, scenario: Any) -> None: ...
    @classmethod
    def make_table(cls, table: Any): ...
    def step(self, step: Any) -> None: ...
    def match(self, match: Any) -> None: ...
    def result(self, step: Any) -> None: ...
    def embedding(self, mime_type: Any, data: Any) -> None: ...
    def eof(self) -> None: ...
    def close(self) -> None: ...
    def add_feature_element(self, element: Any): ...
    @property
    def current_feature_element(self): ...
    def update_status_data(self) -> None: ...
    def finish_current_scenario(self) -> None: ...
    def write_json_header(self) -> None: ...
    def write_json_footer(self) -> None: ...
    def write_json_feature(self, feature_data: Any) -> None: ...
    def write_json_feature_separator(self) -> None: ...

class PrettyJSONFormatter(JSONFormatter):
    name: str = ...
    description: str = ...
    dumps_kwargs: Any = ...
