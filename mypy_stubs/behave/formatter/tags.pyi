from behave.formatter.base import Formatter as Formatter
from behave.textutil import compute_words_maxsize as compute_words_maxsize
from typing import Any

class AbstractTagsFormatter(Formatter):
    with_tag_inheritance: bool = ...
    tag_counts: Any = ...
    def __init__(self, stream_opener: Any, config: Any) -> None: ...
    def uri(self, uri: Any) -> None: ...
    def feature(self, feature: Any) -> None: ...
    def scenario(self, scenario: Any) -> None: ...
    stream: Any = ...
    def close(self) -> None: ...
    def record_tags(self, tags: Any, model_element: Any) -> None: ...
    def report_tags(self) -> None: ...

class TagsFormatter(AbstractTagsFormatter):
    name: str = ...
    description: str = ...
    with_tag_inheritance: bool = ...
    show_ordered_by_usage: bool = ...
    def report_tags(self) -> None: ...
    @staticmethod
    def get_tag_count_details(tag_count: Any): ...
    def report_tag_counts(self) -> None: ...
    def report_tag_counts_by_usage(self): ...

class TagsLocationFormatter(AbstractTagsFormatter):
    name: str = ...
    description: str = ...
    with_tag_inheritance: bool = ...
    def report_tags(self) -> None: ...
    def report_tags_by_locations(self) -> None: ...
