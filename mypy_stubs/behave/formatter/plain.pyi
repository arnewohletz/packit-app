from behave.formatter.base import Formatter as Formatter
from behave.model_describe import ModelPrinter as ModelPrinter
from behave.textutil import make_indentation as make_indentation
from typing import Any, Optional

class PlainFormatter(Formatter):
    name: str = ...
    description: str = ...
    SHOW_MULTI_LINE: bool = ...
    SHOW_TAGS: bool = ...
    SHOW_ALIGNED_KEYWORDS: bool = ...
    DEFAULT_INDENT_SIZE: int = ...
    RAISE_OUTPUT_ERRORS: bool = ...
    steps: Any = ...
    show_timings: Any = ...
    show_multiline: Any = ...
    show_aligned_keywords: Any = ...
    show_tags: Any = ...
    indent_size: Any = ...
    stream: Any = ...
    printer: Any = ...
    def __init__(self, stream_opener: Any, config: Any, **kwargs: Any) -> None: ...
    @property
    def multiline_indentation(self): ...
    def reset_steps(self) -> None: ...
    def write_tags(self, tags: Any, indent: Optional[Any] = ...) -> None: ...
    def feature(self, feature: Any) -> None: ...
    def background(self, background: Any) -> None: ...
    def scenario(self, scenario: Any) -> None: ...
    def step(self, step: Any) -> None: ...
    def result(self, step: Any) -> None: ...
    def eof(self) -> None: ...
    def doc_string(self, doc_string: Any) -> None: ...
    def table(self, table: Any) -> None: ...

class Plain0Formatter(PlainFormatter):
    name: str = ...
    description: str = ...
    SHOW_MULTI_LINE: bool = ...
    SHOW_TAGS: bool = ...
    SHOW_ALIGNED_KEYWORDS: bool = ...
