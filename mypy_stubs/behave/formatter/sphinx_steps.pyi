from behave.formatter import sphinx_util as sphinx_util
from behave.formatter.steps import AbstractStepsFormatter as AbstractStepsFormatter
from behave.model import Table as Table
from typing import Any, Optional

has_docutils: bool

class StepsModule:
    module_name: Any = ...
    step_definitions: Any = ...
    def __init__(self, module_name: Any, step_definitions: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def filename(self): ...
    @property
    def module(self): ...
    @property
    def module_doc(self): ...
    def append(self, step_definition: Any) -> None: ...

class SphinxStepsDocumentGenerator:
    default_step_definition_doc: str = ...
    shows_step_module_info: bool = ...
    shows_step_module_overview: bool = ...
    make_step_index_entries: bool = ...
    make_step_labels: Any = ...
    document_separator: Any = ...
    step_document_prefix: str = ...
    step_heading_prefix: str = ...
    step_definitions: Any = ...
    destdir: Any = ...
    stream: Any = ...
    document: Any = ...
    def __init__(self, step_definitions: Any, destdir: Optional[Any] = ..., stream: Optional[Any] = ...) -> None: ...
    @property
    def stdout_mode(self): ...
    @staticmethod
    def describe_step_definition(step_definition: Any, step_type: Optional[Any] = ...): ...
    def ensure_destdir_exists(self) -> None: ...
    def ensure_document_is_closed(self) -> None: ...
    def discover_step_modules(self): ...
    def create_document(self, filename: Any): ...
    def write_docs(self): ...
    def write_step_module_index(self, step_modules: Any, filename: str = ...) -> None: ...
    def write_step_module(self, step_module: Any) -> None: ...
    def write_step_module_overview(self, step_definitions: Any) -> None: ...
    @staticmethod
    def make_step_definition_index_id(step: Any): ...
    def make_step_definition_doc(self, step: Any): ...
    def write_step_definition(self, step: Any) -> None: ...

class SphinxStepsFormatter(AbstractStepsFormatter):
    name: str = ...
    description: str = ...
    doc_generator_class: Any = ...
    destdir: Any = ...
    def __init__(self, stream_opener: Any, config: Any) -> None: ...
    @property
    def step_definitions(self): ...
    def close(self) -> None: ...
    def create_document_generator(self): ...
    def report(self) -> None: ...
