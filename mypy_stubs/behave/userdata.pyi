from behave._types import Unknown as Unknown
from typing import Any, Optional

def parse_bool(text: Any): ...
def parse_user_define(text: Any): ...
def unqote(text: Any): ...

class UserData(dict):
    def getas(self, convert: Any, name: Any, default: Optional[Any] = ..., valuetype: Optional[Any] = ...): ...
    def getint(self, name: Any, default: int = ...): ...
    def getfloat(self, name: Any, default: float = ...): ...
    def getbool(self, name: Any, default: bool = ...): ...
    @classmethod
    def make(cls, data: Any): ...

class UserDataNamespace:
    namespace: Any = ...
    data: Any = ...
    def __init__(self, namespace: Any, data: Optional[Any] = ...) -> None: ...
    @staticmethod
    def make_scoped(namespace: Any, name: Any): ...
    def get(self, name: Any, default: Optional[Any] = ...): ...
    def getas(self, convert: Any, name: Any, default: Optional[Any] = ..., valuetype: Optional[Any] = ...): ...
    def getint(self, name: Any, default: int = ...): ...
    def getfloat(self, name: Any, default: float = ...): ...
    def getbool(self, name: Any, default: bool = ...): ...
    def __contains__(self, name: Any): ...
    def __getitem__(self, name: Any): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __len__(self): ...
    def scoped_keys(self): ...
    def keys(self) -> None: ...
    def values(self) -> None: ...
    def items(self) -> None: ...
