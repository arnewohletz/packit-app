from behave._types import ExceptionUtil as ExceptionUtil
from behave.capture import CaptureController as CaptureController
from behave.configuration import ConfigError as ConfigError
from behave.formatter._registry import make_formatters as make_formatters
from behave.runner_util import PathManager as PathManager, collect_feature_locations as collect_feature_locations, exec_file as exec_file, load_step_modules as load_step_modules, parse_features as parse_features
from typing import Any, Optional

class CleanupError(RuntimeError): ...
class ContextMaskWarning(UserWarning): ...

class Context:
    BEHAVE: str = ...
    USER: str = ...
    FAIL_ON_CLEANUP_ERRORS: bool = ...
    feature: Any = ...
    text: Any = ...
    table: Any = ...
    stdout_capture: Any = ...
    stderr_capture: Any = ...
    log_capture: Any = ...
    fail_on_cleanup_errors: Any = ...
    def __init__(self, runner: Any) -> None: ...
    @staticmethod
    def ignore_cleanup_error(context: Any, cleanup_func: Any, exception: Any) -> None: ...
    @staticmethod
    def print_cleanup_error(context: Any, cleanup_func: Any, exception: Any) -> None: ...
    def use_with_user_mode(self): ...
    def user_mode(self): ...
    def __getattr__(self, attr: Any): ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...
    def __delattr__(self, attr: Any) -> None: ...
    def __contains__(self, attr: Any): ...
    def execute_steps(self, steps_text: Any): ...
    def add_cleanup(self, cleanup_func: Any, *args: Any, **kwargs: Any) -> None: ...

def use_context_with_mode(context: Any, mode: Any) -> None: ...
def scoped_context_layer(context: Any, layer_name: Optional[Any] = ...) -> None: ...
def path_getrootdir(path: Any): ...

class ModelRunner:
    config: Any = ...
    features: Any = ...
    hooks: Any = ...
    formatters: Any = ...
    undefined_steps: Any = ...
    step_registry: Any = ...
    capture_controller: Any = ...
    context: Any = ...
    feature: Any = ...
    hook_failures: int = ...
    def __init__(self, config: Any, features: Optional[Any] = ..., step_registry: Optional[Any] = ...) -> None: ...
    aborted: Any = ...
    def run_hook(self, name: Any, context: Any, *args: Any) -> None: ...
    def setup_capture(self) -> None: ...
    def start_capture(self) -> None: ...
    def stop_capture(self) -> None: ...
    def teardown_capture(self) -> None: ...
    def run_model(self, features: Optional[Any] = ...): ...
    def run(self): ...

class Runner(ModelRunner):
    path_manager: Any = ...
    base_dir: Any = ...
    def __init__(self, config: Any) -> None: ...
    def setup_paths(self) -> None: ...
    def before_all_default_hook(self, context: Any) -> None: ...
    def load_hooks(self, filename: Optional[Any] = ...) -> None: ...
    def load_step_definitions(self, extra_step_paths: Optional[Any] = ...) -> None: ...
    def feature_locations(self): ...
    def run(self): ...
    context: Any = ...
    formatters: Any = ...
    def run_with_paths(self): ...
