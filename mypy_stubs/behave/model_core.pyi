from behave.capture import Captured as Captured
from enum import Enum
from typing import Any, Optional

PLATFORM_WIN: Any

def posixpath_normalize(path: Any): ...

class Status(Enum):
    untested: int = ...
    skipped: int = ...
    passed: int = ...
    failed: int = ...
    undefined: int = ...
    executing: int = ...
    def __eq__(self, other: Any) -> Any: ...
    @classmethod
    def from_name(cls, name: Any): ...

class Argument:
    start: Any = ...
    end: Any = ...
    original: Any = ...
    value: Any = ...
    name: Any = ...
    def __init__(self, start: Any, end: Any, original: Any, value: Any, name: Optional[Any] = ...) -> None: ...

class FileLocation:
    __pychecker__: str = ...
    filename: Any = ...
    line: Any = ...
    def __init__(self, filename: Any, line: Optional[Any] = ...) -> None: ...
    def get(self): ...
    def abspath(self): ...
    def basename(self): ...
    def dirname(self): ...
    def relpath(self, start: Any = ...): ...
    def exists(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    @classmethod
    def for_function(cls, func: Any, curdir: Optional[Any] = ...): ...

class BasicStatement:
    location: Any = ...
    keyword: Any = ...
    name: Any = ...
    captured: Any = ...
    exception: Any = ...
    exc_traceback: Any = ...
    error_message: Any = ...
    def __init__(self, filename: Any, line: Any, keyword: Any, name: Any) -> None: ...
    @property
    def filename(self): ...
    @property
    def line(self): ...
    def reset(self) -> None: ...
    def store_exception_context(self, exception: Any) -> None: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class TagStatement(BasicStatement):
    tags: Any = ...
    def __init__(self, filename: Any, line: Any, keyword: Any, name: Any, tags: Any) -> None: ...
    def should_run_with_tags(self, tag_expression: Any): ...

class TagAndStatusStatement(BasicStatement):
    final_status: Any = ...
    tags: Any = ...
    should_skip: bool = ...
    skip_reason: Any = ...
    def __init__(self, filename: Any, line: Any, keyword: Any, name: Any, tags: Any) -> None: ...
    def should_run_with_tags(self, tag_expression: Any): ...
    @property
    def status(self): ...
    def set_status(self, value: Any) -> None: ...
    def clear_status(self) -> None: ...
    def reset(self) -> None: ...
    def compute_status(self) -> None: ...

class Replayable:
    type: Any = ...
    def replay(self, formatter: Any) -> None: ...

def unwrap_function(func: Any, max_depth: int = ...): ...
