from types import ModuleType
from typing import Any, Optional

def setup_api_with_step_decorators(module: Any, step_registry: Any) -> None: ...
def setup_api_with_matcher_functions(module: Any, matcher_factory: Any) -> None: ...

class FakeModule(ModuleType):
    ensure_fake: bool = ...
    def __setitem__(self, name: Any, value: Any) -> None: ...

class StepRegistryModule(FakeModule):
    registry: Any = ...
    def __init__(self, step_registry: Any) -> None: ...

class StepMatchersModule(FakeModule):
    matcher_factory: Any = ...
    use_default_step_matcher: Any = ...
    get_matcher: Any = ...
    __file__: Any = ...
    __name__: str = ...
    def __init__(self, matcher_factory: Any) -> None: ...

class BehaveModule(FakeModule):
    use_default_step_matcher: Any = ...
    __file__: Any = ...
    __name__: str = ...
    __path__: Any = ...
    __package__: Any = ...
    def __init__(self, step_registry: Any, matcher_factory: Optional[Any] = ...) -> None: ...

class StepImportModuleContext:
    step_registry: Any = ...
    matcher_factory: Any = ...
    modules: Any = ...
    def __init__(self, step_container: Any) -> None: ...
    def reset_current_matcher(self) -> None: ...

unknown: Any

def use_step_import_modules(step_container: Any) -> None: ...
