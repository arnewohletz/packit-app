from datetime import date, datetime, time
from typing import Any, Callable, Iterable, Iterator, List, Optional, Text, Tuple, Type, Union

paramstyle: str
threadsafety: int
apilevel: str
Date = date
Time = time
Timestamp = datetime

def DateFromTicks(ticks: Any) -> None: ...
def TimeFromTicks(ticks: Any) -> None: ...
def TimestampFromTicks(ticks: Any) -> None: ...

version_info: str
sqlite_version_info: Tuple[int, int, int]
Binary = memoryview

def register_adapters_and_converters() -> None: ...

PARSE_COLNAMES: int
PARSE_DECLTYPES: int
SQLITE_ALTER_TABLE: int
SQLITE_ANALYZE: int
SQLITE_ATTACH: int
SQLITE_CREATE_INDEX: int
SQLITE_CREATE_TABLE: int
SQLITE_CREATE_TEMP_INDEX: int
SQLITE_CREATE_TEMP_TABLE: int
SQLITE_CREATE_TEMP_TRIGGER: int
SQLITE_CREATE_TEMP_VIEW: int
SQLITE_CREATE_TRIGGER: int
SQLITE_CREATE_VIEW: int
SQLITE_DELETE: int
SQLITE_DENY: int
SQLITE_DETACH: int
SQLITE_DROP_INDEX: int
SQLITE_DROP_TABLE: int
SQLITE_DROP_TEMP_INDEX: int
SQLITE_DROP_TEMP_TABLE: int
SQLITE_DROP_TEMP_TRIGGER: int
SQLITE_DROP_TEMP_VIEW: int
SQLITE_DROP_TRIGGER: int
SQLITE_DROP_VIEW: int
SQLITE_IGNORE: int
SQLITE_INSERT: int
SQLITE_OK: int
SQLITE_PRAGMA: int
SQLITE_READ: int
SQLITE_REINDEX: int
SQLITE_SELECT: int
SQLITE_TRANSACTION: int
SQLITE_UPDATE: int
adapters: Any
converters: Any
sqlite_version: str
version: str

def adapt(obj: Any, protocol: Any, alternate: Any) -> None: ...
def complete_statement(sql: str) -> bool: ...
def connect(database: Union[bytes, Text], timeout: float=..., detect_types: int=..., isolation_level: Optional[str]=..., check_same_thread: bool=..., factory: Optional[Type[Connection]]=..., cached_statements: int=..., uri: bool=...) -> Connection: ...
def enable_callback_tracebacks(flag: bool) -> None: ...
def enable_shared_cache(do_enable: int) -> None: ...
def register_adapter(type: Type, callable: Callable[[], Union[int, float, str, bytes]]) -> None: ...
def register_converter(typename: str, callable: Callable[[bytes], Any]) -> None: ...

class Cache:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def display(self, *args: Any, **kwargs: Any) -> None: ...
    def get(self, *args: Any, **kwargs: Any) -> None: ...

class Connection:
    DataError: Any
    DatabaseError: Any
    Error: Any
    IntegrityError: Any
    InterfaceError: Any
    InternalError: Any
    NotSupportedError: Any
    OperationalError: Any
    ProgrammingError: Any
    Warning: Any
    in_transaction: Any
    isolation_level: Any
    row_factory: Any
    text_factory: Any
    total_changes: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def close(self) -> None: ...
    def commit(self) -> None: ...
    def create_aggregate(self, name: str, num_params: int, aggregate_class: type) -> None: ...
    def create_collation(self, name: str, callable: Any) -> None: ...
    def create_function(self, name: str, num_params: int, func: Any) -> None: ...
    def cursor(self, cursorClass: Optional[type]=...) -> Cursor: ...
    def execute(self, sql: str, parameters: Iterable[Any]=...) -> Cursor: ...
    def executemany(self, sql: str, seq_of_parameters: Iterable[Iterable[Any]]) -> Cursor: ...
    def executescript(self, sql_script: Union[bytes, Text]) -> Cursor: ...
    def interrupt(self, *args: Any, **kwargs: Any) -> None: ...
    def iterdump(self, *args: Any, **kwargs: Any) -> None: ...
    def rollback(self, *args: Any, **kwargs: Any) -> None: ...
    def set_authorizer(self, *args: Any, **kwargs: Any) -> None: ...
    def set_progress_handler(self, *args: Any, **kwargs: Any) -> None: ...
    def set_trace_callback(self, *args: Any, **kwargs: Any) -> None: ...
    def enable_load_extension(self, enabled: bool) -> None: ...
    def load_extension(self, path: str) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...
    def __enter__(self, *args: Any, **kwargs: Any) -> None: ...
    def __exit__(self, *args: Any, **kwargs: Any) -> None: ...

class Cursor(Iterator[Any]):
    arraysize: Any
    connection: Any
    description: Any
    lastrowid: Any
    row_factory: Any
    rowcount: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def close(self, *args: Any, **kwargs: Any) -> None: ...
    def execute(self, sql: str, parameters: Iterable[Any]=...) -> Cursor: ...
    def executemany(self, sql: str, seq_of_parameters: Iterable[Iterable[Any]]) -> Cursor: ...
    def executescript(self, sql_script: Union[bytes, Text]) -> Cursor: ...
    def fetchall(self) -> List[Any]: ...
    def fetchmany(self, size: Optional[int]=...) -> List[Any]: ...
    def fetchone(self) -> Any: ...
    def setinputsizes(self, *args: Any, **kwargs: Any) -> None: ...
    def setoutputsize(self, *args: Any, **kwargs: Any) -> None: ...
    def __iter__(self) -> Cursor: ...
    def __next__(self) -> Any: ...

class Error(Exception): ...
class DatabaseError(Error): ...
class DataError(DatabaseError): ...
class IntegrityError(DatabaseError): ...
class InterfaceError(Error): ...
class InternalError(DatabaseError): ...
class NotSupportedError(DatabaseError): ...
class OperationalError(DatabaseError): ...

class OptimizedUnicode:
    maketrans: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def capitalize(self, *args: Any, **kwargs: Any) -> None: ...
    def casefold(self, *args: Any, **kwargs: Any) -> None: ...
    def center(self, *args: Any, **kwargs: Any) -> None: ...
    def count(self, *args: Any, **kwargs: Any) -> None: ...
    def encode(self, *args: Any, **kwargs: Any) -> None: ...
    def endswith(self, *args: Any, **kwargs: Any) -> None: ...
    def expandtabs(self, *args: Any, **kwargs: Any) -> None: ...
    def find(self, *args: Any, **kwargs: Any) -> None: ...
    def format(self, *args: Any, **kwargs: Any) -> None: ...
    def format_map(self, *args: Any, **kwargs: Any) -> None: ...
    def index(self, *args: Any, **kwargs: Any) -> None: ...
    def isalnum(self, *args: Any, **kwargs: Any) -> None: ...
    def isalpha(self, *args: Any, **kwargs: Any) -> None: ...
    def isdecimal(self, *args: Any, **kwargs: Any) -> None: ...
    def isdigit(self, *args: Any, **kwargs: Any) -> None: ...
    def isidentifier(self, *args: Any, **kwargs: Any) -> None: ...
    def islower(self, *args: Any, **kwargs: Any) -> None: ...
    def isnumeric(self, *args: Any, **kwargs: Any) -> None: ...
    def isprintable(self, *args: Any, **kwargs: Any) -> None: ...
    def isspace(self, *args: Any, **kwargs: Any) -> None: ...
    def istitle(self, *args: Any, **kwargs: Any) -> None: ...
    def isupper(self, *args: Any, **kwargs: Any) -> None: ...
    def join(self, *args: Any, **kwargs: Any) -> None: ...
    def ljust(self, *args: Any, **kwargs: Any) -> None: ...
    def lower(self, *args: Any, **kwargs: Any) -> None: ...
    def lstrip(self, *args: Any, **kwargs: Any) -> None: ...
    def partition(self, *args: Any, **kwargs: Any) -> None: ...
    def replace(self, *args: Any, **kwargs: Any) -> None: ...
    def rfind(self, *args: Any, **kwargs: Any) -> None: ...
    def rindex(self, *args: Any, **kwargs: Any) -> None: ...
    def rjust(self, *args: Any, **kwargs: Any) -> None: ...
    def rpartition(self, *args: Any, **kwargs: Any) -> None: ...
    def rsplit(self, *args: Any, **kwargs: Any) -> None: ...
    def rstrip(self, *args: Any, **kwargs: Any) -> None: ...
    def split(self, *args: Any, **kwargs: Any) -> None: ...
    def splitlines(self, *args: Any, **kwargs: Any) -> None: ...
    def startswith(self, *args: Any, **kwargs: Any) -> None: ...
    def strip(self, *args: Any, **kwargs: Any) -> None: ...
    def swapcase(self, *args: Any, **kwargs: Any) -> None: ...
    def title(self, *args: Any, **kwargs: Any) -> None: ...
    def translate(self, *args: Any, **kwargs: Any) -> None: ...
    def upper(self, *args: Any, **kwargs: Any) -> None: ...
    def zfill(self, *args: Any, **kwargs: Any) -> None: ...
    def __add__(self, other: Any) -> None: ...
    def __contains__(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    # def __format__(self, *args: Any, **kwargs: Any) -> None: ...
    def __ge__(self, other: Any) -> Any: ...
    def __getitem__(self, index: Any) -> None: ...
    def __getnewargs__(self, *args: Any, **kwargs: Any) -> None: ...
    def __gt__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __mod__(self, other: Any) -> None: ...
    def __mul__(self, other: Any) -> None: ...
    def __ne__(self, other: Any) -> Any: ...
    def __rmod__(self, other: Any) -> None: ...
    def __rmul__(self, other: Any) -> None: ...

class PrepareProtocol:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class ProgrammingError(DatabaseError): ...

class Row:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def keys(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __getitem__(self, index: Any) -> None: ...
    def __gt__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class Statement:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Warning(Exception): ...
